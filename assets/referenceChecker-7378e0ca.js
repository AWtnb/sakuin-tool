import{o as t,a,F as f,g as o,t as l}from"./index-c967e13c.js";import{E as u}from"./entry-1c7d23b5.js";import{a as m}from"./SimpleTextarea-967c8544.js";const b={__name:"SimpleList",props:{arr:Array},setup(c){return(r,n)=>(t(),a("ul",null,[(t(!0),a(f,null,o(c.arr,(e,s)=>(t(),a("li",{key:s},l(e),1))),128))]))}};class g{constructor(r){const n=m(r);this.entries=n.filter(e=>String(e).trim()).map(e=>new u(e)),this.refs=this.entries.filter(e=>e.isReference),this.nonRefs=this.entries.filter(e=>!e.isReference),this.referred=this.entries.filter(e=>e.backLink.length>0)}findMissingBackLink(){return this.refs.map(r=>this.nonRefs.filter(e=>e.basename==r.referTo&&e.backLink.includes(r.basename)).length>0?null:{problem:r.name,require:`${r.referTo}（${r.basename}）`}).filter(Boolean)}findMissingRefs(){return this.referred.map(r=>{const n=r.backLink.filter(e=>this.refs.filter(i=>i.basename==e&&i.referTo==r.basename).length<1);return n.length<1?null:{problem:r.name,require:n.map(e=>`${e}　→${r.basename}`)}}).filter(Boolean)}findAdjacent(){const r=[];return this.entries.forEach((n,e)=>{if(n.isReference){const s=this.entries[e-1];s&&!s.isReference&&s.backLink.includes(n.basename)&&r.push(n);const i=this.entries[e+1];i&&!i.isReference&&i.backLink.includes(n.basename)&&r.push(n)}}),r.map(n=>n.name)}}export{g as R,b as _};
